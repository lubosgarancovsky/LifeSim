(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const a of document.querySelectorAll('link[rel="modulepreload"]'))i(a);new MutationObserver(a=>{for(const s of a)if(s.type==="childList")for(const o of s.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&i(o)}).observe(document,{childList:!0,subtree:!0});function t(a){const s={};return a.integrity&&(s.integrity=a.integrity),a.referrerpolicy&&(s.referrerPolicy=a.referrerpolicy),a.crossorigin==="use-credentials"?s.credentials="include":a.crossorigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function i(a){if(a.ep)return;a.ep=!0;const s=t(a);fetch(a.href,s)}})();function K(n=0,e=10){if(e<n)throw new Error("Maximum value cannot be less than minimum value while randomizing a number");return Math.round(Math.random()*(e-n))+n}function b(n=0,e=1){if(e<n)throw new Error("Maximum value cannot be less than minimum value while randomizing a number");return Math.random()*(e-n)+n}function C(n){let e=n.length-1,t=Math.round(Math.random()*(e-0));return n[t]}function $(n,e){let t=Math.abs(n.coordinates.x-e.coordinates.x),i=Math.abs(n.coordinates.y-e.coordinates.y);return t+i}const p=class{constructor(n=1,e=0){this.x=n,this.y=e}setX(n){this.x=n}getX(){return this.x}setY(n){this.y=n}getY(){return this.y}setAngle(n){let e=this.getLength();this.x=Math.cos(n)*e,this.y=Math.sin(n)*e}getAngle(){return Math.atan2(this.y,this.x)}setLength(n){let e=this.getAngle();this.x=Math.cos(e)*n,this.y=Math.sin(e)*n}getLength(){return Math.sqrt(this.x*this.x+this.y*this.y)}add(n){return new p(this.x+n.x,this.y+n.y)}subtract(n){return new p(this.x-n.x,this.y-n.y)}multiply(n){return new p(this.x*n,this.y*n)}divide(n){return new p(this.x/n,this.y/n)}toString(){return`X: ${this.getX()}
Y: ${this.getY()}
Angle: ${this.getAngle()}
Length: ${this.getLength()}`}static vector(n,e){return new p(n,e)}static copy(n){return new p(n.x,n.y)}static random(n,e){return new p(K(n,e),K(n,e))}static distance(n,e){return Math.hypot(n.x-e.x,n.y-e.y)}};let g=p;g.zero=new p(0,0);g.one=new p(1,1);g.up=new p(0,-1);g.down=new p(0,1);g.left=new p(-1,0);g.right=new p(1,0);g.minusOne=new p(-1,-1);class E{constructor(){this.strokeStyle=""}setPosition(e){return this.position=e,this}setSize(e){return this.size=e,this}setFillStyle(e){return this.fillStyle=e,this}setStrokeStyle(e){return this.strokeStyle=e,this}getCenter(){let e=Math.ceil(this.position.x+this.size.x/2),t=Math.ceil(this.position.y+this.size.y/2);return new g(e,t)}copy(){return new E().setPosition(this.position).setSize(this.size).setFillStyle(this.fillStyle)}}class r{}r.settings={game:{males:10,females:10,foodInventoryLimit:35,waterInventoryLimit:35,fertility:1,agingSpeed:.2,pregnancyMeterSpeed:8,adultAge:18},world:{tileSize:32,waterDensity:.4,foodDensity:.05,foodMaxAmount:400,foodGrowingSpeed:4},colors:{grass:"#00a613",grassStroke:"rgba(45, 176, 16, 0.5)",water:"#0f38a8",waterStroke:"rgba(7, 61, 240, 0.4)",food:"#008504",human:"#c99073",pregnantHuman:"#c98073",maleStroke:"#0062ff",femaleStroke:"#ff05e6",progressbarBG:"rgb(0, 0, 0, 0.4)",progressbarFG:"rgb(0, 0, 0)"},debug:{viewRange:!1,path:!1,resources:!1,resourceAmount:!1,resourceItem:!1}};var y=(n=>(n[n.GRASS=0]="GRASS",n[n.WATER=1]="WATER",n))(y||{});class q extends E{constructor(e,t,i){super(),this.neighbours=[],this.f=0,this.h=0,this.g=0,this.parent=void 0,this.resource=null,this.coordinates=new g(e,t),this.position=new g(e*i,t*i),this.size=new g(i,i)}setTerrainType(e){return this.type=e,this.fillStyle=e===y.GRASS?r.settings.colors.grass:r.settings.colors.water,this.strokeStyle=e===y.GRASS?r.settings.colors.grassStroke:r.settings.colors.waterStroke,this}getRandomPositionInside(){let e=b(this.position.x,this.position.x+this.size.x),t=b(this.position.y,this.position.y+this.size.y);return new g(e,t)}addResource(e){this.resource=e}getFirstWalkableNeighbour(e,t,i){let a=this.coordinates.y*t+this.coordinates.x;return this.coordinates.y<i-1&&e[a+t].type===y.GRASS?e[a+t]:this.coordinates.y>0&&e[a-t].type===y.GRASS?e[a-t]:this.coordinates.x<t-1&&e[a+1].type===y.GRASS?e[a+1]:this.coordinates.x>0&&e[a-1].type===y.GRASS?e[a-1]:this.coordinates.y<i-1&&this.coordinates.x<t-1&&e[a+t+1].type===y.GRASS?e[a+t+1]:this.coordinates.y<i-1&&this.coordinates.x>0&&e[a+t-1].type===y.GRASS?e[a+t-1]:this.coordinates.y>0&&this.coordinates.x>0&&e[a-t-1].type===y.GRASS?e[a-t-1]:this.coordinates.y>0&&this.coordinates.x<t-1&&e[a-t+1].type===y.GRASS?e[a-t+1]:null}updateNeighbours(e,t,i){let a=this.coordinates.y*t+this.coordinates.x;this.coordinates.y<i-1&&e[a+t].type!=y.WATER&&this.neighbours.push(e[a+t]),this.coordinates.y>0&&e[a-t].type!=y.WATER&&this.neighbours.push(e[a-t]),this.coordinates.x<t-1&&e[a+1].type!=y.WATER&&this.neighbours.push(e[a+1]),this.coordinates.x>0&&e[a-1].type!=y.WATER&&this.neighbours.push(e[a-1]),this.coordinates.y<i-1&&this.coordinates.x<t-1&&e[a+t+1].type!=y.WATER&&this.neighbours.push(e[a+t+1]),this.coordinates.y<i-1&&this.coordinates.x>0&&e[a+t-1].type!=y.WATER&&this.neighbours.push(e[a+t-1]),this.coordinates.y>0&&this.coordinates.x>0&&e[a-t-1].type!=y.WATER&&this.neighbours.push(e[a-t-1]),this.coordinates.y>0&&this.coordinates.x<t-1&&e[a-t+1].type!=y.WATER&&this.neighbours.push(e[a-t+1])}}var Y=perlinNoise3d=function(){for(var n=Math.floor(720),e=new Array(n),t=new Array(n),i=Math.PI/180,a=0;a<n;a++)e[a]=Math.sin(a*i*.5),t[a]=Math.cos(a*i*.5);var s=n;s>>=1;var o=function(){this.perlin_octaves=4,this.perlin_amp_falloff=.5,this.perlin=null};return o.prototype={noiseSeed:function(h){var u=function(){var d,c,m=4294967296;return{setSeed:function(A){c=d=(A==null?Math.random()*m:A)>>>0},getSeed:function(){return d},rand:function(){return(c=(1664525*c+1013904223)%m)/m}}}();u.setSeed(h),this.perlin=new Array(4096);for(var f=0;f<4096;f++)this.perlin[f]=u.rand();return this},get:function(h,u,f){if(u=u||0,f=f||0,this.perlin==null){this.perlin=new Array(4096);for(var d=0;d<4096;d++)this.perlin[d]=Math.random()}h<0&&(h=-h),u<0&&(u=-u),f<0&&(f=-f);for(var c,m,A,v,k,w=Math.floor(h),L=Math.floor(u),B=Math.floor(f),I=h-w,T=u-L,N=f-B,H=0,P=.5,D=function(Z){return .5*(1-t[Math.floor(Z*s)%n])},F=0;F<this.perlin_octaves;F++){var S=w+(L<<4)+(B<<8);c=D(I),m=D(T),A=this.perlin[4095&S],A+=c*(this.perlin[S+1&4095]-A),v=this.perlin[S+16&4095],A+=m*((v+=c*(this.perlin[S+16+1&4095]-v))-A),v=this.perlin[4095&(S+=256)],v+=c*(this.perlin[S+1&4095]-v),k=this.perlin[S+16&4095],v+=m*((k+=c*(this.perlin[S+16+1&4095]-k))-v),H+=(A+=D(N)*(v-A))*P,P*=this.perlin_amp_falloff,w<<=1,L<<=1,B<<=1,(I*=2)>=1&&(w++,I--),(T*=2)>=1&&(L++,T--),(N*=2)>=1&&(B++,N--)}return H}},o}(),X=Y;class _{constructor(e,t,i){this.terrain=[],this.ground=[],this.WIDTH=e,this.HEIGHT=t,this.TILE_SIZE=i}init(){const e=new X;for(let t=0;t<this.HEIGHT;t++)for(let i=0;i<this.WIDTH;i++){let a=e.get(i/16,t/16);const s=new q(i,t,this.TILE_SIZE);s.setSize(new g(this.TILE_SIZE,this.TILE_SIZE)),a>r.settings.world.waterDensity?(s.setTerrainType(y.GRASS),this.ground.push(s)):s.setTerrainType(y.WATER),this.terrain.push(s)}for(let t=0;t<this.terrain.length;t++)this.terrain[t].updateNeighbours(this.terrain,this.WIDTH,this.HEIGHT)}getIndexOfTile(e){return this.terrain.indexOf(e)}getTileByIndex(e){return e>this.terrain.length?null:this.terrain[e]}getTileByGridCoordinates(e,t){if(e>this.WIDTH||t>this.HEIGHT)return null;const i=t*this.WIDTH+e;return this.terrain[i]}getTileByPosition(e,t){const i=Math.floor(e/this.TILE_SIZE),a=Math.floor(t/this.TILE_SIZE);return i>this.WIDTH||a>this.HEIGHT?null:this.getTileByGridCoordinates(i,a)}getSubGrid(e,t,i){const a=[],s=this.getTileByPosition(e,t);if(!s)return null;const o=this.getIndexOfTile(s);if(o<0)return null;let h=o-i*this.WIDTH-i;for(let u=0;u<i*2+1;u++){for(let f=0;f<i*2+1;f++){const d=this.getTileByIndex(h+f);d&&Math.abs((h+f)%this.WIDTH-o%this.WIDTH)<=i&&a.push(d)}h+=this.WIDTH}return a}}class G{constructor(){this.strokeStyle=""}setPosition(e){return this.position=e,this}setSize(e){return this.radius=e,this}setFillStyle(e){return this.fillStyle=e,this}}class W extends G{constructor(e){super(),this.maxAmount=0,this.amount=0,this.isBeingGathered=!1,this.amount=r.settings.world.foodMaxAmount,this.maxAmount=r.settings.world.foodMaxAmount,this.parentTile=e,this.parentTile.addResource(this),this.position=new g(this.parentTile.position.x+this.parentTile.size.x/2,this.parentTile.position.y+this.parentTile.size.y/2),this.fillStyle=r.settings.colors.food,this.radius=this.parentTile.size.x*.3}getParent(){return this.parentTile}update(e){this.amount<this.maxAmount&&(this.amount+=r.settings.world.foodGrowingSpeed*e,this.radius=this.amount/this.maxAmount*100*(this.parentTile.size.x*.3)/100)}gather(e){return this.amount-e<0?(this.amount=0,this.amount):(this.amount=this.amount-e,e)}getAmount(){return this.amount}getPatentTile(){return this.parentTile}getMaxAmount(){return this.maxAmount}}class Q{constructor(e){this.food=[],this.terrainController=e}init(){const e=this.terrainController.terrain;for(let t=0;t<e.length;t++)if(e[t].type===y.GRASS&&Math.random()<r.settings.world.foodDensity){const a=new W(e[t]);this.food.push(a)}}addResource(e){const t=new W(e);return this.food.push(t),t}removeResource(e){let t=this.food.indexOf(e);return t>=0?(this.food.splice(t,1),e):null}}var M=(n=>(n[n.MALE=0]="MALE",n[n.FEMALE=1]="FEMALE",n))(M||{});class x{static randomGenes(){const e=new x;return e.speed=K(40,70),e.viewRange=K(2,7),e.hungerModificator=b(.5,2),e.thirstModificator=b(.5,2),e.matingModificator=b(1,4),e.fertility=b(0,10),e}static getGenesFromParents(e,t){return this.randomGenes()}}const ee=["Liam","Noah","Oliver","Elijah","James","William","Benjamin","Lucas","Henry","Theodore","Jack","Levi","Alexander","Jackson","Mateo","Daniel","Michael","Mason","Sebastian","Ethan","Logan","Owen","Samuel","Jacob","Asher","Aiden","John","Joseph","Wyatt","David","Leo","Luke","Julian","Hudson","Grayson","Matthew","Ezra","Gabriel","Carter","Isaac","Jayden","Luca","Anthony","Dylan","Lincoln","Thomas","Maverick","Elias","Josiah","Charles","Caleb","Christopher","Ezekiel","Miles","Jaxon","Isaiah","Andrew","Joshua","Nathan","Nolan","Adrian","Cameron","Santiago","Eli","Aaron","Ryan","Angel","Cooper","Waylon","Easton","Kai","Christian","Landon","Colton","Roman","Axel","Brooks","Jonathan","Robert","Jameson","Ian","Everett","Greyson","Wesley","Jeremiah","Hunter","Leonardo","Jordan","Jose","Bennett","Silas","Nicholas","Parker","Beau","Weston","Austin","Connor","Carson","Dominic","Xavier","Jaxson","Jace","Emmett","Adam","Declan","Rowan","Micah","Kayden","Gael","River","Ryder","Kingston","Damian","Sawyer","Luka","Evan","Vincent","Legend","Myles","Harrison","August","Bryson","Amir","Giovanni","Chase","Diego","Milo","Jasper","Walker","Jason","Brayden","Cole","Nathaniel","George","Lorenzo","Zion","Luis","Archer","Enzo","Jonah","Thiago","Theo","Ayden","Zachary","Calvin","Braxton","Ashton","Rhett","Atlas","Jude","Bentley","Carlos","Ryker","Adriel","Arthur","Ace","Tyler","Jayce","Max","Elliot","Graham","Kaiden","Maxwell","Juan","Dean","Matteo","Malachi","Ivan","Elliott","Jesus","Emiliano","Messiah","Gavin","Maddox","Camden","Hayden","Leon","Antonio","Justin","Tucker","Brandon","Kevin","Judah","Finn","King","Brody","Xander","Nicolas","Charlie","Arlo","Emmanuel","Barrett","Felix","Alex","Miguel","Abel","Alan","Beckett","Amari","Karter","Timothy","Abraham","Jesse","Zayden","Blake","Alejandro","Dawson","Tristan","Victor","Avery","Joel","Grant","Eric","Patrick","Peter","Richard","Edward","Andres","Emilio","Colt","Knox","Beckham","Adonis","Kyrie","Matias","Oscar","Lukas","Marcus","Hayes","Caden","Remington","Griffin","Nash","Israel","Steven","Holden","Rafael","Zane","Jeremy","Kash","Preston","Kyler","Jax","Jett","Kaleb","Riley","Simon","Phoenix","Javier","Bryce","Louis","Mark","Cash","Lennox","Paxton","Malakai","Paul","Kenneth","Nico","Kaden","Lane","Kairo","Maximus","Omar","Finley","Atticus","Crew","Brantley","Colin","Dallas","Walter","Brady","Callum","Ronan","Hendrix","Jorge","Tobias","Clayton","Emerson","Damien","Zayn","Malcolm","Kayson","Bodhi","Bryan","Aidan","Cohen","Brian","Cayden","Andre","Niko","Maximiliano","Zander","Khalil","Rory","Francisco","Cruz","Kobe","Reid","Daxton","Derek","Martin","Jensen","Karson","Tate","Muhammad","Jaden","Joaquin","Josue","Gideon","Dante","Cody","Bradley","Orion","Spencer","Angelo","Erick","Jaylen","Julius","Manuel","Ellis","Colson","Cairo","Gunner","Wade","Chance","Odin","Anderson","Kane","Raymond","Cristian","Aziel","Prince","Ezequiel","Jake","Otto","Eduardo","Rylan","Ali","Cade","Stephen","Ari","Kameron","Dakota","Warren","Ricardo","Killian","Mario","Romeo","Cyrus","Ismael","Russell","Tyson","Edwin","Desmond","Nasir","Remy","Tanner","Fernando","Hector","Titus","Lawson","Sean","Kyle","Elian","Corbin","Bowen","Wilder","Armani","Royal","Stetson","Briggs","Sullivan","Leonel","Callan","Finnegan","Jay","Zayne","Marshall","Kade","Travis","Sterling","Raiden","Sergio","Tatum","Cesar","Zyaire","Milan","Devin","Gianni","Kamari","Royce","Malik","Jared","Franklin","Clark","Noel","Marco","Archie","Apollo","Pablo","Garrett","Oakley","Memphis","Quinn","Onyx","Alijah","Baylor","Edgar","Nehemiah","Winston","Major","Rhys","Forrest","Jaiden","Reed","Santino","Troy","Caiden","Harvey","Collin","Solomon","Donovan","Damon","Jeffrey","Kason","Sage","Grady","Kendrick","Leland","Luciano","Pedro","Hank","Hugo","Esteban","Johnny","Kashton","Ronin","Ford","Mathias","Porter","Erik","Johnathan","Frank","Tripp","Casey","Fabian","Leonidas","Baker","Matthias","Philip","Jayceon","Kian","Saint","Ibrahim","Jaxton","Augustus","Callen","Trevor","Ruben","Adan","Conor","Dax","Braylen","Kaison","Francis","Kyson","Andy","Lucca","Mack","Peyton","Alexis","Deacon","Kasen","Kamden","Frederick","Princeton","Braylon","Wells","Nikolai","Iker","Bo","Dominick","Moshe","Cassius","Gregory","Lewis","Kieran","Isaias","Seth","Marcos","Omari","Shane","Keegan","Jase","Asa","Sonny","Uriel","Pierce","Jasiah","Eden","Rocco","Banks","Cannon","Denver","Zaiden","Roberto","Shawn","Drew","Emanuel","Kolton","Ayaan","Ares","Conner","Jalen","Alonzo","Enrique","Dalton","Moses","Koda","Bodie","Jamison","Phillip","Zaire","Jonas","Kylo","Moises","Shepherd","Allen","Kenzo","Mohamed","Keanu","Dexter","Conrad","Bruce","Sylas","Soren","Raphael","Rowen","Gunnar","Sutton","Quentin","Jaziel","Emmitt","Makai","Koa","Maximilian","Brixton","Dariel","Zachariah","Roy","Armando","Corey","Saul","Izaiah","Danny","Davis","Ridge","Yusuf","Ariel","Valentino","Jayson","Ronald","Albert","Gerardo","Ryland","Dorian","Drake","Gage","Rodrigo","Hezekiah","Kylan","Boone","Ledger","Santana","Jamari","Jamir","Lawrence","Reece","Kaysen","Shiloh","Arjun","Marcelo","Abram","Benson","Huxley","Nikolas","Zain","Kohen","Samson","Miller","Donald","Finnley","Kannon","Lucian","Watson","Keith","Westin","Tadeo","Sincere","Boston","Axton","Amos","Chandler","Leandro","Raul","Scott","Reign","Alessandro","Camilo","Derrick","Morgan","Julio","Clay","Edison","Jaime","Augustine","Julien","Zeke","Marvin","Bellamy","Landen","Dustin","Jamie","Krew","Kyree","Colter","Johan","Houston","Layton","Quincy","Case","Atreus","Cayson","Aarav","Darius","Harlan","Justice","Abdiel","Layne","Raylan","Arturo","Taylor","Anakin","Ander","Hamza","Otis","Azariah","Leonard","Colby","Duke","Flynn","Trey","Gustavo","Fletcher","Issac","Sam","Trenton","Callahan","Chris","Mohammad","Rayan","Lionel","Bruno","Jaxxon","Zaid","Brycen","Roland","Dillon","Lennon","Ambrose","Rio","Mac","Ahmed","Samir","Yosef","Tru","Creed","Tony","Alden","Aden","Alec","Carmelo","Dario","Marcel","Roger","Ty","Ahmad","Emir","Landyn","Skyler","Mohammed","Dennis","Kareem","Nixon","Rex","Uriah","Lee","Louie","Rayden","Reese","Alberto","Cason","Quinton","Kingsley","Chaim","Alfredo","Mauricio","Caspian","Legacy","Ocean","Ozzy","Briar","Wilson","Forest","Grey","Joziah","Salem","Neil","Remi","Bridger","Harry","Jefferson","Lachlan","Nelson","Casen","Salvador","Magnus","Tommy","Marcellus","Maximo","Jerry","Clyde","Aron","Keaton","Eliam","Lian","Trace","Douglas","Junior","Titan","Cullen","Cillian","Musa","Mylo","Hugh","Tomas","Vincenzo","Westley","Langston","Byron","Kiaan","Loyal","Orlando","Kyro","Amias","Amiri","Jimmy","Vicente","Khari","Brendan","Rey","Ben","Emery","Zyair","Bjorn","Evander","Ramon","Alvin","Ricky","Jagger","Brock","Dakari","Eddie","Blaze","Gatlin","Alonso","Curtis","Kylian","Nathanael","Devon","Wayne","Zakai","Mathew","Rome","Riggs","Aryan","Avi","Hassan","Lochlan","Stanley","Dash","Kaiser","Benicio","Bryant","Talon","Rohan","Wesson","Joe","Noe","Melvin","Vihaan","Zayd","Darren","Enoch","Mitchell","Jedidiah","Brodie","Castiel","Ira","Lance","Guillermo","Thatcher","Ermias","Misael","Jakari","Emory","Mccoy","Rudy","Thaddeus","Valentin","Yehuda","Bode","Madden","Kase","Bear","Boden","Jiraiya","Maurice","Alvaro","Ameer","Demetrius","Eliseo","Kabir","Kellan","Allan","Azrael","Calum","Niklaus","Ray","Damari","Elio","Jon","Leighton","Axl","Dane","Eithan","Eugene","Kenji","Jakob","Colten","Eliel","Nova","Santos","Zahir","Idris","Ishaan","Kole","Korbin","Seven","Alaric","Kellen","Bronson","Franco","Wes","Larry","Mekhi","Jamal","Dilan","Elisha","Brennan","Kace","Van","Felipe","Fisher","Cal","Dior","Judson","Alfonso","Deandre","Rocky","Henrik","Reuben","Anders","Arian","Damir","Jacoby","Khalid","Kye","Mustafa","Jadiel","Stefan","Yousef","Aydin","Jericho","Robin","Wallace","Alistair","Davion","Alfred","Ernesto","Kyng","Everest","Gary","Leroy","Yahir","Braden","Kelvin","Kristian","Adler","Avyaan","Brayan","Jones","Truett","Aries","Joey","Randy","Jaxx","Jesiah","Jovanni","Azriel","Brecken","Harley","Zechariah","Gordon","Jakai","Carl","Graysen","Kylen","Ayan","Branson","Crosby","Dominik","Jabari","Jaxtyn","Kristopher","Ulises","Zyon","Fox","Howard","Salvatore","Turner","Vance","Harlem","Jair","Jakobe","Jeremias","Osiris","Azael","Bowie","Canaan","Elon","Granger","Karsyn","Zavier","Cain","Dangelo","Heath","Yisroel","Gian","Shepard","Harold","Kamdyn","Rene","Rodney","Yaakov","Adrien","Kartier","Cassian","Coleson","Ahmir","Darian","Genesis","Kalel","Agustin","Wylder","Yadiel","Ephraim","Kody","Neo","Ignacio","Osman","Aldo","Abdullah","Cory","Blaine","Dimitri","Khai","Landry","Palmer","Benedict","Leif","Koen","Maxton","Mordechai","Zev","Atharv","Bishop","Blaise","Davian"],te=["Olivia","Emma","Charlotte","Amelia","Ava","Sophia","Isabella","Mia","Evelyn","Harper","Luna","Camila","Gianna","Elizabeth","Eleanor","Ella","Abigail","Sofia","Avery","Scarlett","Emily","Aria","Penelope","Chloe","Layla","Mila","Nora","Hazel","Madison","Ellie","Lily","Nova","Isla","Grace","Violet","Aurora","Riley","Zoey","Willow","Emilia","Stella","Zoe","Victoria","Hannah","Addison","Leah","Lucy","Eliana","Ivy","Everly","Lillian","Paisley","Elena","Naomi","Maya","Natalie","Kinsley","Delilah","Claire","Audrey","Aaliyah","Ruby","Brooklyn","Alice","Aubrey","Autumn","Leilani","Savannah","Valentina","Kennedy","Madelyn","Josephine","Bella","Skylar","Genesis","Sophie","Hailey","Sadie","Natalia","Quinn","Caroline","Allison","Gabriella","Anna","Serenity","Nevaeh","Cora","Ariana","Emery","Lydia","Jade","Sarah","Eva","Adeline","Madeline","Piper","Rylee","Athena","Peyton","Everleigh","Vivian","Clara","Raelynn","Liliana","Samantha","Maria","Iris","Ayla","Eloise","Lyla","Eliza","Hadley","Melody","Julia","Parker","Rose","Isabelle","Brielle","Adalynn","Arya","Eden","Remi","Mackenzie","Maeve","Margaret","Reagan","Charlie","Alaia","Melanie","Josie","Elliana","Cecilia","Mary","Daisy","Alina","Lucia","Ximena","Juniper","Kaylee","Magnolia","Summer","Adalyn","Sloane","Amara","Arianna","Isabel","Reese","Emersyn","Sienna","Kehlani","River","Freya","Valerie","Blakely","Genevieve","Esther","Valeria","Katherine","Kylie","Norah","Amaya","Bailey","Ember","Ryleigh","Georgia","Catalina","Emerson","Alexandra","Faith","Jasmine","Ariella","Ashley","Andrea","Millie","June","Khloe","Callie","Juliette","Sage","Ada","Anastasia","Olive","Alani","Brianna","Rosalie","Molly","Brynlee","Amy","Ruth","Aubree","Gemma","Taylor","Oakley","Margot","Arabella","Sara","Journee","Harmony","Blake","Alaina","Aspen","Noelle","Selena","Oaklynn","Morgan","Londyn","Zuri","Aliyah","Jordyn","Juliana","Finley","Presley","Zara","Leila","Marley","Sawyer","Amira","Lilly","London","Kimberly","Elsie","Ariel","Lila","Alana","Diana","Kamila","Nyla","Vera","Hope","Annie","Kaia","Myla","Alyssa","Angela","Ana","Lennon","Evangeline","Harlow","Rachel","Gracie","Rowan","Laila","Elise","Sutton","Lilah","Adelyn","Phoebe","Octavia","Sydney","Mariana","Wren","Lainey","Vanessa","Teagan","Kayla","Malia","Elaina","Saylor","Brooke","Lola","Miriam","Alayna","Adelaide","Daniela","Jane","Payton","Journey","Lilith","Delaney","Dakota","Mya","Charlee","Alivia","Annabelle","Kailani","Lucille","Trinity","Gia","Tatum","Raegan","Camille","Kaylani","Kali","Stevie","Maggie","Haven","Tessa","Daphne","Adaline","Hayden","Joanna","Jocelyn","Lena","Evie","Juliet","Fiona","Cataleya","Angelina","Leia","Paige","Julianna","Milani","Talia","Rebecca","Kendall","Harley","Lia","Phoenix","Dahlia","Logan","Camilla","Thea","Jayla","Brooklynn","Blair","Vivienne","Hallie","Madilyn","Mckenna","Evelynn","Ophelia","Celeste","Alayah","Winter","Catherine","Collins","Nina","Briella","Palmer","Noa","Mckenzie","Kiara","Amari","Adriana","Gracelynn","Lauren","Cali","Kalani","Aniyah","Nicole","Alexis","Mariah","Gabriela","Wynter","Amina","Ariyah","Adelynn","Remington","Reign","Alaya","Dream","Alexandria","Willa","Avianna","Makayla","Gracelyn","Elle","Amiyah","Arielle","Elianna","Giselle","Brynn","Ainsley","Aitana","Charli","Demi","Makenna","Rosemary","Danna","Izabella","Lilliana","Melissa","Samara","Lana","Mabel","Everlee","Fatima","Leighton","Esme","Raelyn","Madeleine","Nayeli","Camryn","Kira","Annalise","Selah","Serena","Royalty","Rylie","Celine","Laura","Brinley","Frances","Michelle","Heidi","Rory","Sabrina","Destiny","Gwendolyn","Alessandra","Poppy","Amora","Nylah","Luciana","Maisie","Miracle","Joy","Liana","Raven","Shiloh","Allie","Daleyza","Kate","Lyric","Alicia","Lexi","Addilyn","Anaya","Malani","Paislee","Elisa","Kayleigh","Azalea","Francesca","Jordan","Regina","Viviana","Aylin","Skye","Daniella","Makenzie","Veronica","Legacy","Maia","Ariah","Alessia","Carmen","Astrid","Maren","Helen","Felicity","Alexa","Danielle","Lorelei","Paris","Adelina","Bianca","Gabrielle","Jazlyn","Scarlet","Bristol","Navy","Esmeralda","Colette","Stephanie","Jolene","Marlee","Sarai","Hattie","Nadia","Rosie","Kamryn","Kenzie","Alora","Holly","Matilda","Sylvia","Cameron","Armani","Emelia","Keira","Braelynn","Jacqueline","Alison","Amanda","Cassidy","Emory","Ari","Haisley","Jimena","Jessica","Elaine","Dorothy","Mira","Eve","Oaklee","Averie","Charleigh","Lyra","Madelynn","Angel","Edith","Jennifer","Raya","Ryan","Heaven","Kyla","Wrenley","Meadow","Carter","Kora","Saige","Kinley","Maci","Mae","Salem","Aisha","Adley","Carolina","Sierra","Alma","Helena","Bonnie","Mylah","Briar","Aurelia","Leona","Macie","Maddison","April","Aviana","Lorelai","Alondra","Kennedi","Monroe","Emely","Maliyah","Ailani","Madilynn","Renata","Katie","Zariah","Imani","Amber","Analia","Ariya","Anya","Emberly","Emmy","Mara","Maryam","Dior","Mckinley","Virginia","Amalia","Mallory","Opal","Shelby","Clementine","Remy","Xiomara","Elliott","Elora","Katalina","Antonella","Skyler","Hanna","Kaliyah","Alanna","Haley","Itzel","Cecelia","Jayleen","Kensley","Beatrice","Journi","Dylan","Ivory","Yaretzi","Meredith","Sasha","Gloria","Oaklyn","Sloan","Abby","Davina","Lylah","Erin","Reyna","Kaitlyn","Michaela","Nia","Fernanda","Jaliyah","Jenna","Sylvie","Miranda","Anne","Mina","Myra","Aleena","Alia","Frankie","Ellis","Kathryn","Nalani","Nola","Jemma","Lennox","Marie","Angelica","Cassandra","Calliope","Adrianna","Ivanna","Zelda","Faye","Karsyn","Oakleigh","Dayana","Amirah","Megan","Siena","Reina","Rhea","Julieta","Malaysia","Henley","Liberty","Leslie","Alejandra","Kelsey","Charley","Capri","Priscilla","Zariyah","Savanna","Emerie","Christina","Skyla","Macy","Mariam","Melina","Chelsea","Dallas","Laurel","Briana","Holland","Lilian","Amaia","Blaire","Margo","Louise","Rosalia","Aleah","Bethany","Flora","Kylee","Kendra","Sunny","Laney","Tiana","Chaya","Ellianna","Milan","Aliana","Estella","Julie","Yara","Rosa","Cheyenne","Emmie","Carly","Janelle","Kyra","Naya","Malaya","Sevyn","Lina","Mikayla","Jayda","Leyla","Eileen","Irene","Karina","Aileen","Aliza","Kataleya","Kori","Indie","Lara","Romina","Jada","Kimber","Amani","Liv","Treasure","Louisa","Marleigh","Winnie","Kassidy","Noah","Monica","Keilani","Zahra","Zaylee","Hadassah","Jamie","Allyson","Anahi","Maxine","Karla","Khaleesi","Johanna","Penny","Hayley","Marilyn","Della","Freyja","Jazmin","Kenna","Ashlyn","Florence","Ezra","Melany","Murphy","Sky","Marina","Noemi","Coraline","Selene","Bridget","Alaiya","Angie","Fallon","Thalia","Rayna","Martha","Halle","Estrella","Joelle","Kinslee","Roselyn","Theodora","Jolie","Dani","Elodie","Halo","Nala","Promise","Justice","Nellie","Novah","Estelle","Jenesis","Miley","Hadlee","Janiyah","Waverly","Braelyn","Pearl","Aila","Katelyn","Sariyah","Azariah","Bexley","Giana","Lea","Cadence","Mavis","Ila","Rivka","Jovie","Yareli","Bellamy","Kamiyah","Kara","Baylee","Jianna","Kai","Alena","Novalee","Elliot","Livia","Ashlynn","Denver","Emmalyn","Persephone","Marceline","Jazmine","Kiana","Mikaela","Aliya","Galilea","Harlee","Jaylah","Lillie","Mercy","Ensley","Bria","Kallie","Celia","Berkley","Ramona","Jaylani","Jessie","Aubrie","Madisyn","Paulina","Averi","Aya","Chana","Milana","Cleo","Iyla","Cynthia","Hana","Lacey","Andi","Giuliana","Milena","Leilany","Saoirse","Adele","Drew","Bailee","Hunter","Rayne","Anais","Kamari","Paula","Rosalee","Teresa","Zora","Avah","Belen","Greta","Layne","Scout","Zaniyah","Amelie","Dulce","Chanel","Clare","Rebekah","Giovanna","Ellison","Isabela","Kaydence","Rosalyn","Royal","Alianna","August","Nyra","Vienna","Amoura","Anika","Harmoni","Kelly","Linda","Aubriella","Kairi","Ryann","Avayah","Gwen","Whitley","Noor","Khalani","Marianna","Addyson","Annika","Karter","Vada","Tiffany","Artemis","Clover","Laylah","Paisleigh","Elyse","Kaisley","Veda","Zendaya","Simone","Alexia","Alisson","Angelique","Ocean","Elia","Lilianna","Maleah","Avalynn","Marisol","Goldie","Malayah","Emmeline","Paloma","Raina","Brynleigh","Chandler","Valery","Adalee","Tinsley","Violeta","Baylor","Lauryn","Marlowe","Birdie","Jaycee","Lexie","Loretta","Lilyana","Princess","Shay","Hadleigh","Natasha","Indigo","Zaria","Addisyn","Deborah","Leanna","Barbara","Kimora","Emerald","Raquel","Julissa","Robin","Austyn","Dalia","Nyomi","Ellen","Kynlee","Salma","Luella","Zayla","Addilynn","Giavanna","Samira","Amaris","Madalyn","Scarlette","Stormi","Etta","Ayleen","Brittany","Brylee","Araceli","Egypt","Iliana","Paityn","Zainab","Billie","Haylee","India","Kaiya","Nancy","Clarissa","Mazikeen","Taytum","Aubrielle","Rylan","Ainhoa","Aspyn","Elina","Elsa","Magdalena","Kailey","Arleth","Joyce","Judith","Crystal","Emberlynn","Landry","Paola","Braylee","Guinevere","Aarna","Aiyana","Kahlani","Lyanna","Sariah","Itzayana","Aniya","Frida","Jaylene","Kiera","Loyalty","Azaria","Jaylee","Kamilah","Keyla","Kyleigh","Micah","Nataly","Kathleen","Zoya","Meghan","Soraya","Zoie","Arlette","Zola","Luisa","Vida","Ryder","Tatiana","Tori","Aarya","Eleanora","Sandra","Soleil","Annabella"],z={male:ee,female:te};function ie(){return C(z.male)}function ae(){return C(z.female)}function ne(){const n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";let e="";for(let t=0;t<16;t++)e+=n.charAt(Math.floor(Math.random()*n.length));return e}class se{constructor(){this.food=0,this.water=0}addWater(e){this.water+=e}addFood(e){this.food+=e}removeWater(e){this.water-=e}removeFood(e){this.food-=e}}class l{}class re extends l{constructor(){super(),this.trueNode=new he,this.falseNode=new oe}evaluate(e){return e.foundFoodObject?(this.trueNode.evaluate(e),!0):(this.falseNode.evaluate(e),!1)}}class oe extends l{constructor(){super(),this.trueNode=new de,this.falseNode=new le}evaluate(e){return e.foundWaterObject?(this.trueNode.evaluate(e),!0):(this.falseNode.evaluate(e),!1)}}class le extends l{evaluate(e){return e.inventory.food<r.settings.game.foodInventoryLimit&&e.findFoodResource()||e.inventory.water<r.settings.game.waterInventoryLimit&&e.findWaterResource()?!0:(e.move(),!1)}}class he extends l{constructor(){super(),this.trueNode=new O,this.falseNode=new R}evaluate(e){return e.path.length?(this.falseNode.evaluate(e),!0):(this.trueNode.evaluate(e),!1)}}class de extends l{constructor(){super(),this.trueNode=new O,this.falseNode=new R}evaluate(e){return e.path.length?(this.falseNode.evaluate(e),!0):(this.trueNode.evaluate(e),!1)}}class O extends l{evaluate(e){return e.isCollecting=!0,e.foundFoodObject?(e.state="Collecting food",!0):(e.state="Collecting water",!0)}}class ue extends l{evaluate(e){return e.state==="Collecting food"?(e.collectFood(),!0):(e.collectWater(),!0)}}class ce extends l{constructor(){super(),this.trueNode=new ge,this.falseNode=new ye}evaluate(e){return e.foundMate?(this.trueNode.evaluate(e),!0):(this.falseNode.evaluate(e),!1)}}class ye extends l{constructor(){super(),this.trueNode=new fe,this.falseNode=new re}evaluate(e){return e.matingUrge>90?(this.trueNode.evaluate(e),!0):(this.falseNode.evaluate(e),!1)}}class ge extends l{constructor(){super(),this.trueNode=new me,this.falseNode=new R}evaluate(e){return e.path.length?(this.falseNode.evaluate(e),!1):(this.trueNode.evaluate(e),!0)}}class fe extends l{evaluate(e){return e.findMate(),!0}}class pe extends l{evaluate(e){return e.handleMating(),!0}}class me extends l{evaluate(e){return e.state="Mating",e.isMating=!0,!0}}class Ae extends l{constructor(){super(),this.trueNode=new ve,this.falseNode=new ce}evaluate(e){return e.thirst>50?(this.trueNode.evaluate(e),!0):(this.falseNode.evaluate(e),!1)}}class ve extends l{constructor(){super(),this.trueNode=new V,this.falseNode=new Me}evaluate(e){return e.inventory.water>0?(this.trueNode.evaluate(e),!0):(this.falseNode.evaluate(e),!1)}}class Me extends l{constructor(){super(),this.trueNode=new Se,this.falseNode=new Ce}evaluate(e){return e.foundWaterObject?(this.trueNode.evaluate(e),!0):(this.falseNode.evaluate(e),!1)}}class Se extends l{constructor(){super(),this.trueNode=new V,this.falseNode=new R}evaluate(e){return e.path.length?(this.falseNode.evaluate(e),!1):(this.trueNode.evaluate(e),!0)}}class Ce extends l{evaluate(e){return e.findWaterResource()||e.move(),!0}}class be extends l{evaluate(e){return e.handleDrinking(),!0}}class V extends l{evaluate(e){return e.isDrinking=!0,e.state="Drinking",!0}}class Ee extends l{constructor(){super(),this.trueNode=new xe,this.falseNode=new Ae}evaluate(e){return e.hunger>50?(this.trueNode.evaluate(e),!0):(this.falseNode.evaluate(e),!1)}}class xe extends l{constructor(){super(),this.trueNode=new j,this.falseNode=new Re}evaluate(e){return e.inventory.food>0?(this.trueNode.evaluate(e),!0):(this.falseNode.evaluate(e),!1)}}class Re extends l{constructor(){super(),this.trueNode=new we,this.falseNode=new Le}evaluate(e){return e.foundFoodObject?(this.trueNode.evaluate(e),!0):(this.falseNode.evaluate(e),!1)}}class we extends l{constructor(){super(),this.trueNode=new j,this.falseNode=new R}evaluate(e){return e.path.length?(this.falseNode.evaluate(e),!1):(this.trueNode.evaluate(e),!0)}}class Le extends l{evaluate(e){return e.findFoodResource()||e.move(),!0}}class Be extends l{evaluate(e){return e.handleEating(),!0}}class j extends l{evaluate(e){return e.isEating=!0,e.state="Eating",!0}}class Ke extends l{constructor(){super(),this.isEatingNode=new Be,this.isDrinkingNode=new be,this.isMatingNode=new pe,this.isCollectingNode=new ue,this.falseNode=new Ee}evaluate(e){return e.isEating?(this.isEatingNode.evaluate(e),!0):e.isDrinking?(this.isDrinkingNode.evaluate(e),!0):e.isCollecting?(this.isCollectingNode.evaluate(e),!0):e.isMating?(this.isMatingNode.evaluate(e),!0):(this.falseNode.evaluate(e),!1)}}class R extends l{evaluate(e){return e.move(),!0}}class J extends G{constructor(e,t,i,a,s){super(),this.inViewSubgrid=null,this.path=[],this.progressBar=0,this.hunger=0,this.foundFoodObject=null,this.thirst=0,this.foundWaterObject=null,this.matingUrge=0,this.foundMate=null,this.isEating=!1,this.isDrinking=!1,this.isMating=!1,this.isCollecting=!1,this.isPregnant=!1,this.awaitedChildren=[],this.pregnancyMeter=0,this.age=0,this.isChild=!0,this.decisionTree=new Ke,this.UIController=t,this.terrainController=i,this.resourceController=a,this.populationController=s,this.gender=e,this.position=new g(250,250),this.radius=r.settings.world.tileSize*.15,this.fillStyle=r.settings.colors.human,this.inventory=new se,this.id=ne(),e===M.MALE?(this.strokeStyle=r.settings.colors.maleStroke,this.name=ie()):(this.strokeStyle=r.settings.colors.femaleStroke,this.name=ae()),this.state="Wandering"}update(e){this.getSubgridInView(),this.deltaTime=e,this.decisionTree.evaluate(this),this.handleNeedsIncrement(e),this.handleAging(e),this.isPregnant&&this.handlePregnancy(e)}setGenes(e){this.genes=e}handleNeedsIncrement(e){this.hunger+=this.genes.hungerModificator*e,this.thirst+=this.genes.thirstModificator*e,this.isChild||(this.matingUrge+=this.genes.matingModificator*e),this.hunger<0&&(this.hunger=0),this.thirst<0&&(this.thirst=0),this.matingUrge<0&&(this.matingUrge=0),this.hunger>100&&(this.hunger=100,this.populationController.removeHuman(this),this.notifyUI(-1)),this.thirst>100&&(this.thirst=100,this.populationController.removeHuman(this),this.notifyUI(-1)),this.matingUrge>100&&(this.matingUrge=100)}move(){if(this.destination){const e=Math.hypot(this.position.x-this.destination.x,this.position.y-this.destination.y),t=Math.atan2(this.destination.y-this.position.y,this.destination.x-this.position.x),i=Math.cos(t)*this.genes.speed*this.deltaTime,a=Math.sin(t)*this.genes.speed*this.deltaTime;if(e>1){this.position.x+=i,this.position.y+=a;return}if(this.path.length>1){this.path.splice(0,1),this.destination=this.path[0].getRandomPositionInside();return}this.destination=null,this.path=[]}else this.findRandomDestination()}findRandomDestination(){if(this.inViewSubgrid){const e=C(this.inViewSubgrid);this.findPath(e)}}drawpath(){for(let e=0;e<this.path.length;e++)this.path[e].fillStyle="rgba(255, 0, 0, 1)"}findPath(e){const t=this.terrainController.getTileByPosition(this.position.x,this.position.y),i=e;let a=[],s=[],o=[];if(!t||!i){this.path=[],this.destination=null;return}for(a.push(t);a.length>0;){let h=0;for(let d=0;d<a.length;d++)a[d].f<a[h].f&&(h=d);let u=a[h];if(u===i){let d=u;for(o.push(d);d.parent;){let m=d;d=d.parent,o.push(d),m.parent=void 0}let c=o.reverse();this.path=c,this.destination=c[0].getRandomPositionInside();return}a.splice(h,1),s.push(u);let f=u.neighbours;for(let d=0;d<f.length;d++){let c=f[d];if(!s.includes(c)){let m=u.g+1;if(!a.includes(c))a.push(c);else if(m>=c.g)continue;c.g=m,c.h=$(c,i),c.f=c.g+c.h,c.parent=u}}}this.path=[],this.destination=null}getSubgridInView(){this.inViewSubgrid=this.terrainController.getSubGrid(this.position.x,this.position.y,this.genes.viewRange)}getVisibleResources(){var t;if(!((t=this.inViewSubgrid)!=null&&t.length))return[];const e=[];for(let i=0;i<this.inViewSubgrid.length;i++)this.inViewSubgrid[i].resource&&e.push(this.inViewSubgrid[i].resource);return e}highlightResource(){const e=this.getVisibleResources();for(let t=0;t<e.length;t++){const i=this.terrainController.getTileByPosition(e[t].getPatentTile().position.x,e[t].getPatentTile().position.y);i&&(i.fillStyle="rgb(100,100, 240)")}}notifyUI(e){this.UIController.humanChange(this.gender,e)}setDestination(e){this.destination=e}findFoodResource(){const e=this.getVisibleResources().filter(t=>t.getAmount()>0);if(e.length){let t=g.distance(e[0].getParent().position,this.position),i=e[0];for(let a=0;a<e.length;a++)g.distance(e[a].getParent().position,this.position)<t&&(i=e[a]);return this.foundFoodObject=i,this.findPath(i.getParent()),i}return null}handleEating(){const e=()=>{this.foundFoodObject&&(this.foundFoodObject.isBeingGathered=!1),this.isEating=!1,this.state="Wandering",this.foundFoodObject=null,this.progressBar=0},t=50*this.deltaTime;this.inventory.food>0&&(this.hunger-=t,this.inventory.removeFood(t),this.progressBar=100-this.hunger),this.foundFoodObject&&(this.hunger-=this.foundFoodObject.gather(t),this.progressBar=100-this.hunger,this.foundFoodObject.isBeingGathered=!0,this.foundFoodObject.getAmount()<=0&&e()),this.inventory.food<0&&(this.inventory.food=0,e()),this.progressBar>=100&&e()}findWaterResource(){var e;if((e=this.inViewSubgrid)!=null&&e.length){const t=this.inViewSubgrid,i=[];for(let a=0;a<t.length;a++)t[a].type===y.WATER&&i.push(t[a]);if(i.length){let a=g.distance(this.position,i[0].getCenter()),s=i[0];for(let h=0;h<i.length;h++){const u=g.distance(this.position,i[h].getCenter());u<a&&(a=u,s=i[h])}const o=s.getFirstWalkableNeighbour(this.terrainController.terrain,this.terrainController.WIDTH,this.terrainController.HEIGHT);return o?(this.foundWaterObject=s,this.findPath(o),s):null}return null}return null}handleDrinking(){const e=()=>{this.isDrinking=!1,this.state="Wandering",this.foundWaterObject=null,this.progressBar=0},t=50*this.deltaTime;this.inventory.water>0&&(this.thirst-=t,this.inventory.removeWater(t),this.progressBar=100-this.thirst),this.foundWaterObject&&(this.thirst-=t,this.progressBar=100-this.thirst),this.inventory.water<0&&(this.inventory.water=0,e()),this.progressBar>=100&&e()}collectFood(){const e=()=>{this.isCollecting=!1,this.state="Wandering",this.foundFoodObject=null,this.progressBar=0,this.move()},t=20*this.deltaTime;this.foundFoodObject?(this.inventory.addFood(this.foundFoodObject.gather(t)),this.progressBar=this.inventory.food/r.settings.game.foodInventoryLimit*100):e(),(this.progressBar>=100||this.inventory.food>=r.settings.game.foodInventoryLimit||!this.foundFoodObject||this.foundFoodObject.getAmount()===0)&&e()}collectWater(){const e=()=>{this.isCollecting=!1,this.state="Wandering",this.foundWaterObject=null,this.progressBar=0,this.move()},t=20*this.deltaTime;this.foundWaterObject?(this.inventory.addWater(t),this.progressBar=this.inventory.water/r.settings.game.waterInventoryLimit*100):e(),(this.progressBar>=100||this.inventory.water>=r.settings.game.waterInventoryLimit||!this.foundWaterObject)&&e()}findMate(){if(!!this.inViewSubgrid&&!this.foundMate){const e=this.populationController.population,t=e.indexOf(this),i=e.length;for(let a=t+1;a<i;a++){const s=e[a];if(s.matingUrge>90&&s.gender!=this.gender&&this.humanCollidesWithViewrange(s)){const o=C(this.inViewSubgrid);if(this.findPath(o),s.findPath(o),this.path.length&&s.path.length)return this.foundMate=s,s.foundMate=this,s}}}return this.move(),null}handleMating(){var t,i;const e=()=>{this.foundMate&&this.gender===M.FEMALE&&this.getPregnant(this.foundMate),this.isMating=!1,this.state="Wandering",this.foundMate=null,this.progressBar=0,this.matingUrge=0,this.move()};((t=this.foundMate)==null?void 0:t.isMating)&&this.isMating&&(this.progressBar+=30*this.deltaTime,this.foundMate.progressBar+=30*this.deltaTime),this.foundMate?(((i=this.foundMate)==null?void 0:i.progressBar)>=100||this.progressBar>=100)&&e():e()}humanCollidesWithViewrange(e){if(this.inViewSubgrid){const t=this.inViewSubgrid[0].position,i=(this.genes.viewRange*2+1)*r.settings.world.tileSize,a={x:t.x+i/2,y:t.y+i/2},s=Math.abs(e.position.x-a.x),o=Math.abs(e.position.y-a.y),h=Math.sqrt(i**2+i**2);return s>h/2+e.radius||o>h/2+e.radius?!1:s<=i/2||o<=i/2?!0:(s-i/2)**2+(o-i/2)**2<=e.radius**2}return!1}getPregnant(e){if(this.genes.fertility+e.genes.fertility>=r.settings.game.fertility&&!this.isPregnant){this.isPregnant=!0,this.fillStyle=r.settings.colors.pregnantHuman;const t=Math.random();let i=1;t>.75&&(i=2),t>.9&&(i=3);const a=[];for(let s=0;s<i;s++){const o=new J(C([M.MALE,M.FEMALE]),this.UIController,this.terrainController,this.resourceController,this.populationController);o.setGenes(x.getGenesFromParents(e,this)),a.push(o)}this.awaitedChildren=a}}handlePregnancy(e){if(this.pregnancyMeter+=r.settings.game.pregnancyMeterSpeed*e,this.pregnancyMeter>=100){this.pregnancyMeter=0,this.isPregnant=!1,this.fillStyle=r.settings.colors.human;for(let t=0;t<this.awaitedChildren.length;t++){const i=this.awaitedChildren[t];i.setPosition(g.copy(this.position)),this.populationController.population.push(i),i.notifyUI(1)}}}handleAging(e){this.age+=r.settings.game.agingSpeed*e,this.age<0&&(this.age=0),this.age>=r.settings.game.adultAge&&this.isChild&&(this.isChild=!1,this.radius=r.settings.world.tileSize*.25)}}class Je{constructor(e,t,i){this.population=[],this.terrainController=e,this.resourceController=t,this.UIController=i}init(e=2,t=2){for(let i=0;i<e;i++){const a=new J(M.MALE,this.UIController,this.terrainController,this.resourceController,this).setPosition(g.copy(C(this.terrainController.ground).position));a.setGenes(x.randomGenes()),a.notifyUI(1),this.population.push(a)}for(let i=0;i<t;i++){const a=new J(M.FEMALE,this.UIController,this.terrainController,this.resourceController,this).setPosition(g.copy(C(this.terrainController.ground).position));a.setGenes(x.randomGenes()),a.notifyUI(1),this.population.push(a)}}update(e){const t=this.population.length;if(t>0){for(let i=0;i<t;i++)this.population[i]&&this.population[i].update(e);this.updateUI()}}removeHuman(e){this.population=this.population.filter(t=>t!=e)}updateUI(){this.UIController.drawPopulationList(this.population)}}class ke{constructor(){this.population={population:0,males:0,females:0},this.UIElements={population:null,males:null,females:null,commandButton:null,settingsButton:null,commandSection:null,settingsSection:null,cammandPopulationList:null},this.state={command:!1,settings:!1},this.UIElements.population=document.querySelector("#ui-population-value-population"),this.UIElements.males=document.querySelector("#ui-population-value-males"),this.UIElements.females=document.querySelector("#ui-population-value-females"),this.UIElements.commandButton=document.querySelector("#command-button"),this.UIElements.settingsButton=document.querySelector("#settings-button"),this.UIElements.commandSection=document.querySelector("#command-section"),this.UIElements.settingsSection=document.querySelector("#settings-secion"),this.UIElements.cammandPopulationList=document.querySelector("#command-section-population-list"),this.UIElements.commandButton.addEventListener("click",()=>{this.state.command=!this.state.command,this.state.command?this.UIElements.commandSection.classList.remove("hidden"):this.UIElements.commandSection.classList.add("hidden")}),this.UIElements.settingsButton.addEventListener("click",()=>{this.state.settings=!this.state.settings})}humanChange(e,t){this.population.population+=t,this.UIElements.population.innerHTML=this.population.population,e===M.MALE&&(this.population.males+=t,this.UIElements.males.innerHTML=this.population.males),e===M.FEMALE&&(this.population.females+=t,this.UIElements.females.innerHTML=this.population.females)}drawPopulationList(e){if(!!this.state.command&&!!e.length){const t=e.map((i,a)=>`
        <div class='ui-human-infocard' key=${a}>
          <div>
            <div class='ui-name'><span>${i.name}</span><span>Age: ${Math.floor(i.age)}</span></div>
            <div class=${i.gender===0?"ui-male":"ui-female"}>${i.gender===0?"Male":"Female"}</div>
            <div class='ui-unimportant'>${i.id}</div>
          </div>
          <div class='ui-card-middlepart'>
            <div class='ui-inventory-wrapper'>
              <div>Food: <span>${Math.round(i.inventory.food)}</span></div>
              <div>Water: <span>${Math.round(i.inventory.water)}</span></div>
            </div>
            <div class='ui-progressbars'>
              <div>Hunger: <progress id='pb-hunger' value=${i.hunger} max="100"></progress></div>
              <div>Thirst: <progress id='pb-thirst' value=${i.thirst} max="100"></progress></div>
              <div>Mating: <progress id='pb-mating' value=${i.matingUrge} max="100"></progress></div>
              ${i.isPregnant?`<div>Pregnancy: <progress id='pb-pregnancy' value=${i.pregnancyMeter} max="100"></progress></div>`:""}
            </div>
          </div>
          <div class='ui-values'>
            <div><span>Has food:</span> <span class=${i.foundFoodObject?"ui-success":"ui-error"}>${!!i.foundFoodObject}</span></div>
            <div><span>Has water:</span> <span class=${i.foundWaterObject?"ui-success":"ui-error"}>${!!i.foundWaterObject}</span></div>
            <div><span>Has mate:</span> <span class=${i.foundMate?"ui-success":"ui-error"}>${!!i.foundMate}</span></div>
            <div><span>Path length:</span> <span>${i.path.length}</span></div>
          </div>
          <div class=ui-state>${i.state}</div>
        </div>`);this.UIElements.cammandPopulationList.innerHTML=t.join("")}}}class Ie{constructor(){var e,t;this.tileSize=r.settings.world.tileSize,this.isRunning=!1,this.lastTime=0,this.update=this.update.bind(this),this.canvas=document.querySelector(".canvas"),this.ctx=(e=this.canvas)==null?void 0:e.getContext("2d"),this.app=(t=document.querySelector("#app"))==null?void 0:t.getBoundingClientRect()}init(){this.canvas&&(this.canvas.width=this.app.width,this.canvas.height=this.app.height);const e=Math.ceil(this.canvas.width/this.tileSize),t=Math.ceil(this.canvas.height/this.tileSize);this.UIController=new ke,this.terrainController=new _(e,t,this.tileSize),this.terrainController.init(),this.resourceController=new Q(this.terrainController),this.resourceController.init(),this.populationController=new Je(this.terrainController,this.resourceController,this.UIController),this.populationController.init(r.settings.game.males,r.settings.game.females)}run(){this.isRunning||(this.isRunning=!0,this.lastTime=Date.now(),requestAnimationFrame(this.update))}update(e){const t=(e-this.lastTime)/1e3;this.lastTime=e,this.drawTerrain(),this.drawFood(),this.drawHumans(),this.updateResources(t),this.populationController.update(t),requestAnimationFrame(this.update)}updateResources(e){const t=this.resourceController.food,i=this.resourceController.food.length;for(let a=0;a<i;a++)t[a].update(e)}drawRect(e,t=.5){this.ctx.lineWidth=t,this.ctx.fillStyle=e.fillStyle,this.ctx.fillRect(e.position.x,e.position.y,e.size.x,e.size.y),e.strokeStyle&&(this.ctx.strokeStyle=e.strokeStyle,this.ctx.strokeRect(e.position.x,e.position.y,e.size.x,e.size.y))}drawCircle(e,t=.5){this.ctx.beginPath(),this.ctx.lineWidth=t,this.ctx.fillStyle=e.fillStyle,this.ctx.arc(e.position.x,e.position.y,e.radius,0,2*Math.PI),this.ctx.fill(),e.strokeStyle&&(this.ctx.strokeStyle=e.strokeStyle,this.ctx.arc(e.position.x,e.position.y,e.radius,0,2*Math.PI),this.ctx.stroke()),this.ctx.closePath()}drawTerrain(){const e=this.terrainController.terrain.length;for(let t=0;t<e;t++){const i=this.terrainController.getTileByIndex(t);i&&this.drawRect(i)}}drawFood(){const e=this.resourceController.food,t=this.resourceController.food.length;for(let i=0;i<t;i++)r.settings.debug.resourceAmount&&(this.ctx.fillStyle="rgb(0,0,0)",this.ctx.fillText(e[i].getAmount().toFixed(0).toString(),e[i].getParent().position.x,e[i].getParent().position.y));for(let i=0;i<t;i++)this.drawCircle(e[i])}drawHumans(){const e=this.populationController.population.length,t=this.populationController.population;for(let i=0;i<e;i++){const a=t[i];if(r.settings.debug.viewRange){const s=a.inViewSubgrid;if(s){const o=r.settings.world.tileSize*(a.genes.viewRange*2+1),h=new E().setPosition(s[0].position).setSize(new g(o,o)).setFillStyle("rgba(0, 0, 0, 0)").setStrokeStyle("rgb(255, 255, 255)");this.drawRect(h)}}if(r.settings.debug.path){const s=a.path;if(s)for(let o=0;o<s.length;o++)this.drawRect(s[o].copy().setStrokeStyle("rgba(255, 50, 50)").setFillStyle("rgba(255,50,50,0.2)"))}if(r.settings.debug.resources){const s=a.getVisibleResources();if(s)for(let o=0;o<s.length;o++)this.drawRect(s[o].getParent().copy().setStrokeStyle("rgba(252, 111, 3, 1)").setFillStyle("rgba(0, 0, 0, 0)"),1)}if(r.settings.debug.resourceItem&&t[i].foundWaterObject){this.drawRect(new E().setPosition(a.foundWaterObject.position).setSize(a.foundWaterObject.size).setFillStyle("rgba(0, 0, 0, 0)").setStrokeStyle("rgba(79, 234, 255)"),1);const s=a.foundWaterObject.getFirstWalkableNeighbour(this.terrainController.terrain,this.terrainController.WIDTH,this.terrainController.HEIGHT);this.drawRect(new E().setPosition(s==null?void 0:s.position).setSize(s==null?void 0:s.size).setFillStyle("rgba(0, 0, 0, 0)").setStrokeStyle("rgba(0, 0, 0, 1)"))}this.drawProgressBar(a),this.drawCircle(a,1)}}drawProgressBar(e){e.progressBar>0&&(this.ctx.beginPath(),this.ctx.fillStyle=r.settings.colors.progressbarBG,this.ctx.fillRect(e.position.x-e.radius*1.5,e.position.y-e.radius*2,e.radius*3,3),this.ctx.beginPath(),this.ctx.fillStyle=r.settings.colors.progressbarFG,this.ctx.fillRect(e.position.x-e.radius*1.5,e.position.y-e.radius*2,e.radius*3/100*e.progressBar,3))}}const U=new Ie;U.init();U.run();
